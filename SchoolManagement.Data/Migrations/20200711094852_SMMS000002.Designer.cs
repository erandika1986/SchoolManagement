// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagement.Data;

namespace SchoolManagement.Data.Migrations
{
    [DbContext(typeof(SMDbContext))]
    [Migration("20200711094852_SMMS000002")]
    partial class SMMS000002
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolManagement.Model.AcademicLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LevelHeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Description");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LevelHeadId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AcademicLevel","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicYear", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AcademicYear","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.AssessmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AssessmentType","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.AssessmentTypeAcademicLevel", b =>
                {
                    b.Property<long>("AssessmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AssessmentTypeId", "AcademicLevelId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("AssessmentTypeAcademicLevel","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Class", b =>
                {
                    b.Property<long>("ClassNameId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Class","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CockpitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ClassName","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassSubjectTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassNameId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectTeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectTeacherId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("ClassSubjectTeacher","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTeacher", b =>
                {
                    b.Property<long>("ClassNameId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassNameId", "AcademicLevelId", "AcademicYearId", "TeacherId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ClassTeacher","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTimeTablePeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassNameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("DayId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("PeriodId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DayId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("ClassTimeTablePeriod","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTimeTablePeriodAssignTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AllocatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ClassTimeTablePeriodId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeallocatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassTimeTablePeriodId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ClassTimeTablePeriodAssignTeacher","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Day", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Day","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("QuestonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestonId");

                    b.ToTable("EssayAnswer","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayStudentAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("QuestonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherComments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestonId");

                    b.HasIndex("StudentId");

                    b.ToTable("EssayStudentAnswer","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MaxMarks")
                        .HasColumnType("real");

                    b.Property<float>("MinMarks")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Standard")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grade","Analysis");
                });

            modelBuilder.Entity("SchoolManagement.Model.HeadOfDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("SubjectAcademicLevelAcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubjectAcademicLevelSubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SubjectAcademicLevelSubjectId", "SubjectAcademicLevelAcademicLevelId");

                    b.ToTable("HeadOfDepartment","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClassNameId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LearningOutcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("VersionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("Lesson","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.LessonChat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<long>("ToUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TopicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("TopicId");

                    b.ToTable("LessonChat","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.LockingDate", b =>
                {
                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("AssessmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasExam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResultMigrated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MigratedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResultLockingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TOSLockingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicYearId", "AcademicLevelId", "SubjectId", "AssessmentTypeId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LockingDate","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("QuestonId")
                        .HasColumnType("bigint");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestonId");

                    b.ToTable("MCQAnswer","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQStudentAnswer", b =>
                {
                    b.Property<long>("MCQAnswerId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("MCQAnswerId", "StudentId", "QuestionId");

                    b.HasIndex("StudentId", "QuestionId");

                    b.ToTable("MCQStudentAnswer","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQStudentQuestion", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeacherComments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("MCQStudentQuestion","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.Period", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Period","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Marks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuestionLevel")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<long?>("TopicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TopicId");

                    b.ToTable("Question","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Role","Account");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 256, DateTimeKind.Utc).AddTicks(8896),
                            Description = "SuperAdmin",
                            IsActive = true,
                            Name = "SuperAdmin",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(659)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3620),
                            Description = "Admin",
                            IsActive = true,
                            Name = "Admin",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3638)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3692),
                            Description = "Principle",
                            IsActive = true,
                            Name = "Principle",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3693)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3694),
                            Description = "LevelHead",
                            IsActive = true,
                            Name = "LevelHead",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3695)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3695),
                            Description = "HOD",
                            IsActive = true,
                            Name = "HOD",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3696)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3697),
                            Description = "Teacher",
                            IsActive = true,
                            Name = "Teacher",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3697)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3698),
                            Description = "Student",
                            IsActive = true,
                            Name = "Student",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3698)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3699),
                            Description = "Parent",
                            IsActive = true,
                            Name = "Parent",
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 257, DateTimeKind.Utc).AddTicks(3699)
                        });
                });

            modelBuilder.Entity("SchoolManagement.Model.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdmissionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmegencyContactNo1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmegencyContactNo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Student","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassNameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ClassNameId", "AcademicLevelId", "AcademicYearId");

                    b.ToTable("StudentClass","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLesson", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LessonMark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("StudentLesson","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.ToTable("StudentSubject","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentSubjectScore", b =>
                {
                    b.Property<long>("AssessmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentSubjectId")
                        .HasColumnType("bigint");

                    b.Property<float>("AllocatedScore")
                        .HasColumnType("real");

                    b.Property<float>("GainedScore")
                        .HasColumnType("real");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<int>("LevelRank")
                        .HasColumnType("int");

                    b.Property<int>("ScoreDifference")
                        .HasColumnType("int");

                    b.Property<float>("ScorePercent")
                        .HasColumnType("real");

                    b.HasKey("AssessmentTypeId", "StudentSubjectId");

                    b.HasIndex("GradeId");

                    b.HasIndex("StudentSubjectId");

                    b.ToTable("StudentSubjectScore","Analysis");
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentTopic", b =>
                {
                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaskMarks")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StudentId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("StudentTopic","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBuscketSubject")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentBasketSubject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("ParentBasketSubjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("SubjectCategory")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasAlternateKey("SubjectCode");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentBasketSubjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Subject","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectAcademicLevel", b =>
                {
                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoOfPeriodPerWeek")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectId", "AcademicLevelId");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SubjectAcademicLevel","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClassAcademicLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClassAcademicYearId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClassNameId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SubjectId", "AcademicLevelId");

                    b.HasIndex("ClassNameId", "ClassAcademicLevelId", "ClassAcademicYearId");

                    b.ToTable("SubjectTeacher","Master");
                });

            modelBuilder.Entity("SchoolManagement.Model.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LearningExperience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Topic","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.TopicContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("TopicId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicContent","Lesson");
                });

            modelBuilder.Entity("SchoolManagement.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoggedInTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("User","Account");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 245, DateTimeKind.Utc).AddTicks(7609),
                            Email = "erandika1986@gmail.com",
                            FullName = "SuperAdmin",
                            IsActive = true,
                            MobileNo = "0702605650",
                            NickName = "SuperAdmin",
                            Password = "HGnySkxIrdSxVCdICLWgVQxx",
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 245, DateTimeKind.Utc).AddTicks(8266),
                            Username = "erandika1986@gmail.com"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 246, DateTimeKind.Utc).AddTicks(1437),
                            Email = "erandika.du@gmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            MobileNo = "0702605651",
                            NickName = "Admin",
                            Password = "HGnySkxIrdSxVCdICLWgVQxx",
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 246, DateTimeKind.Utc).AddTicks(1447),
                            Username = "erandika.du@gmail.com"
                        });
                });

            modelBuilder.Entity("SchoolManagement.Model.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("UserRole","Account");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 275, DateTimeKind.Utc).AddTicks(2902),
                            IsActive = true,
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 275, DateTimeKind.Utc).AddTicks(3800)
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 2L,
                            CreatedById = 1L,
                            CreatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 275, DateTimeKind.Utc).AddTicks(7279),
                            IsActive = true,
                            UpdatedById = 1L,
                            UpdatedOn = new DateTime(2020, 7, 11, 9, 48, 49, 275, DateTimeKind.Utc).AddTicks(7290)
                        });
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicLevel", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedAcademicLevels")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "LevelHead")
                        .WithMany()
                        .HasForeignKey("LevelHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedAcademicLevels")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.AcademicYear", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedAcademicYears")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedAcademicYears")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.AssessmentType", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedAssessmentTypes")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedAssessmentTypes")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.AssessmentTypeAcademicLevel", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("AssessmentTypeAcademicLevels")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AssessmentType", "AssessmentType")
                        .WithMany("AssessmentTypeAcademicLevels")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedAssessmentTypeAcademicLevels")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedAssessmentTypeAcademicLevels")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.Class", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.ClassName", "ClassName")
                        .WithMany("Classes")
                        .HasForeignKey("ClassNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClasses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClasses")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassName", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassNames")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassNames")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassSubjectTeacher", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassSubjectTeachers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.SubjectTeacher", "SubjectTeacher")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("SubjectTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassSubjectTeachers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", "SubjectAcademicLevel")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("ClassSubjectTeachers")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTeacher", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassTeachers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Teacher")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassTeachers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("ClassTeachers")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTimeTablePeriod", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassTimeTablePeriods")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.Day", "Day")
                        .WithMany("ClassTimeTablePeriods")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Period", "Period")
                        .WithMany("ClassTimeTablePeriods")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassTimeTablePeriods")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", "Subject")
                        .WithMany("ClassTimeTablePeriods")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("ClassTimeTablePeriods")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.ClassTimeTablePeriodAssignTeacher", b =>
                {
                    b.HasOne("SchoolManagement.Model.ClassTimeTablePeriod", "ClassTimeTablePeriod")
                        .WithMany("ClassTimeTablePeriodAssignTeachers")
                        .HasForeignKey("ClassTimeTablePeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedClassTimeTablePeriodAssignTeachers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Teacher")
                        .WithMany("ClassTimeTablePeriodAssignTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedClassTimeTablePeriodAssignTeachers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.Day", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedDays")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedDays")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("EssayAnswers")
                        .HasForeignKey("QuestonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.EssayStudentAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("EssayStudentAnswers")
                        .HasForeignKey("QuestonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Student")
                        .WithMany("EssayStudentAnswers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.HeadOfDepartment", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedHeadOfDepartments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Teacher")
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedHeadOfDepartments")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", null)
                        .WithMany("HeadOfDepartments")
                        .HasForeignKey("SubjectAcademicLevelSubjectId", "SubjectAcademicLevelAcademicLevelId");
                });

            modelBuilder.Entity("SchoolManagement.Model.Lesson", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedLessons")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "Owner")
                        .WithMany("OwnerLessons")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedLessons")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", "SubjectAcademicLevel")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.LessonChat", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "FromUser")
                        .WithMany("LessonChatsFrom")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("LessonChats")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "ToUser")
                        .WithMany("LessonChatsTo")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Topic", "Topic")
                        .WithMany("LessonChats")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.LockingDate", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("LockingDates")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("LockingDates")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AssessmentType", "AssessmentType")
                        .WithMany("LockingDates")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedLockingDates")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("LockingDates")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedLockingDates")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("MCQAnswers")
                        .HasForeignKey("QuestonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQStudentAnswer", b =>
                {
                    b.HasOne("SchoolManagement.Model.MCQAnswer", "MCQAnswer")
                        .WithMany("MCQStudentAnswers")
                        .HasForeignKey("MCQAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.MCQStudentQuestion", "MCQStudentQuestion")
                        .WithMany("MCQStudentAnswers")
                        .HasForeignKey("StudentId", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.MCQStudentQuestion", b =>
                {
                    b.HasOne("SchoolManagement.Model.Question", "Question")
                        .WithMany("MCQStudentQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Student")
                        .WithMany("MCQStudentQuestions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.Period", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedPeriods")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedPeriods")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.Question", b =>
                {
                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.Role", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedRoles")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedRoles")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.Student", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedStudents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedStudents")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentClass", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedStudentClasses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedStudentClasses")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassNameId", "AcademicLevelId", "AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentLesson", b =>
                {
                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("StudentLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Student")
                        .WithMany("StudentLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentSubject", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedStudentSubjects")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedStudentSubjects")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", "SubjectAcademicLevel")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentSubjectScore", b =>
                {
                    b.HasOne("SchoolManagement.Model.AssessmentType", "AssessmentType")
                        .WithMany("StudentSubjectScores")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Grade", "Grade")
                        .WithMany("StudentSubjectScores")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.StudentSubject", "StudentSubject")
                        .WithMany("StudentSubjectScores")
                        .HasForeignKey("StudentSubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.StudentTopic", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "Student")
                        .WithMany("StudentTopics")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Topic", "Topic")
                        .WithMany("StudentTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.Subject", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedSubjects")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Subject", "ParentSubject")
                        .WithMany("ChildBasketSubjects")
                        .HasForeignKey("ParentBasketSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedSubjects")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectAcademicLevel", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicLevel", "AcademicLevel")
                        .WithMany("SubjectAcademicLevels")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedSubjectAcademicLevels")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.Subject", "Subject")
                        .WithMany("SubjectAcademicLevels")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedSubjectAcademicLevels")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.SubjectTeacher", b =>
                {
                    b.HasOne("SchoolManagement.Model.AcademicYear", "AcademicYear")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedSubjectTeachers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "Teacher")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedSubjectTeachers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.SubjectAcademicLevel", "SubjectAcademicLevel")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("SubjectId", "AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Class", null)
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("ClassNameId", "ClassAcademicLevelId", "ClassAcademicYearId");
                });

            modelBuilder.Entity("SchoolManagement.Model.Topic", b =>
                {
                    b.HasOne("SchoolManagement.Model.Lesson", "Lesson")
                        .WithMany("Topics")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.TopicContent", b =>
                {
                    b.HasOne("SchoolManagement.Model.Topic", "Topic")
                        .WithMany("TopicContents")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Model.User", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SchoolManagement.Model.UserRole", b =>
                {
                    b.HasOne("SchoolManagement.Model.User", "CreatedBy")
                        .WithMany("CreatedUserRoles")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "UpdatedBy")
                        .WithMany("UpdatedUserRoles")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
